1、开放-封闭原则是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。对于扩展是开放的，对于更改是封闭的。
2、无论模块是多么的封闭，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化封闭做出选择。
他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。
3、面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
4、开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活性好。
开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。
拒绝不成熟的抽象和抽象本身一样重要。